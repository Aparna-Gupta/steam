package web

import github.com/h2oai/steamY/master/az

service Service

type Cluster
 Id int64
 Name string
 TypeId int64
 DetailId int64
 Address string
 State string
 CreatedAt int64

type YarnCluster
 Id int64
 EngineId int64
 Size int
 ApplicationId string
 Memory string
 Username string

type ClusterStatus
 Version string
 Status string
 MaxMemory string
 TotalCpuCount int
 TotalAllowedCpuCount int

type Job
 Name string
 ClusterName string
 Description string
 Progress string
 StartedAt int64
 CompletedAt int64

type Model
 Id int64
 Name string
 ClusterName string
 Algorithm string
 DatasetName string
 ResponseColumnName string
 LogicalName string
 Location string
 MaxRuntime int
 CreatedAt int64

type ScoringService
 Id int64
 ModelId int64
 Address string
 Port int
 ProcessId int
 State string
 CreatedAt int64

type Engine
 Id int64
 Name string
 Location string
 CreatedAt int64

Ping(status bool) status bool

RegisterCluster(address string) clusterId int64
UnregisterCluster(clusterId int64)
StartYarnCluster(clusterName string, engineId int64, size int, memory string, username string) clusterId int64 
StopYarnCluster(clusterId int64)
GetCluster(clusterId int64) cluster *Cluster
GetYarnCluster(clusterId int64) cluster *YarnCluster
GetClusters(offset int64, limit int64) clusters []*Cluster
GetClusterStatus(clusterId int64) clusterStatus *ClusterStatus
DeleteCluster(clusterId int64)

GetJob(clusterId int64, jobName string) job *Job
GetJobs(clusterId int64) jobs []*Job

BuildModel(clusterId int64, dataset string, targetName string, maxRunTime int) model *Model
GetModel(modelId int64) model *Model
GetModels(offset int64, limit int64) models []*Model
GetClusterModels(clusterId int64) models []*Model
GetModelFromCluster(clusterId int64, modelName string) model *Model
DeleteModel(modelId int64)

StartScoringService(modelId int64, port int) service *ScoringService
StopScoringService(serviceId int64)
GetScoringService(serviceId int64) service *ScoringService
GetScoringServices(offset int64, limit int64) services []*ScoringService
DeleteScoringService(serviceId int64)

AddEngine(engineName string, enginePath string) engineId int64
GetEngine(engineId int64) engine *Engine
GetEngines() engines []*Engine
DeleteEngine(engineId int64)
