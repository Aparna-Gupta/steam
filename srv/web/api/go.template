// ------------------------------
// --- This is generated code ---
// ---      DO NOT EDIT       ---
// ------------------------------

{{define "typeOf"}}{{if .IsArray}}[]{{end}}{{if .IsStruct}}*{{end}}{{.Type}}{{end}}

package web

import (
	"github.com/h2oai/steamY/master/az"
	"log"
	"net/http"
)

// --- Types ---

{{range .Structs}}
type {{.Name}} struct {
{{range .Fields}}
  {{.Name}} {{template "typeOf" .}} `json:"{{snake .Name}}"`
{{end}}
}
{{end}}

// --- Interface ---

type Az interface {
	Identify(r *http.Request) (az.Principal, error)
}

{{with .Facade}}
type {{.Name}} interface {
  {{range .Methods}}
  {{.Name}}(pz az.Principal{{range .Inputs}}, {{lower .Name}} {{template "typeOf" .}}{{end}}) ({{range .Outputs}}{{template "typeOf" .}}, {{end}}error)
  {{end}}
}
{{end}}


// --- Messages ---

{{with .Facade}}
{{range .Methods}}
type {{.Name}}In struct {
  {{range .Inputs}}
  {{.Name}} {{template "typeOf" .}} `json:"{{snake .Name}}"`
  {{end}}
}
type {{.Name}}Out struct {
  {{range .Outputs}}
  {{.Name}} {{template "typeOf" .}} `json:"{{snake .Name}}"`
  {{end}}
}
{{end}}
{{end}}


// --- Client Stub ---

type Remote struct {
	Proc Proc
}

type Proc interface {
	Call(name string, in, out interface{}) error
}

{{with .Facade}}
{{range .Methods}}
func (this *Remote) {{.Name}}({{range $i, $e := .Inputs}}{{if $i}}, {{end}}{{lower .Name}} {{template "typeOf" .}}{{end}}) ({{range .Outputs}}{{template "typeOf" .}}, {{end}}error) {
  in := {{.Name}}In{ {{range $i, $e := .Inputs}}{{if $i}}, {{end}}{{lower .Name}} {{end}} }
  var out {{.Name}}Out
  err := this.Proc.Call("{{.Name}}", &in, &out)
  if err != nil {
    return {{range .Outputs}}{{.DefaultValue}}, {{end}}err
  }
  return {{range .Outputs}}out.{{.Name}}, {{end}}nil
}
{{end}}
{{end}}


// --- Server Stub ---

type Impl struct {
	Service Service
	Az      az.Az
}

{{with .Facade}}
{{range .Methods}}
func (this *Impl) {{.Name}}(r *http.Request, in *{{.Name}}In, out *{{.Name}}Out) error {
	pz, azerr := this.Az.Identify(r)
	if azerr != nil {
		return azerr
	}
	log.Println(pz, "{{.Name}}")

	{{range $i, $e := .Outputs}}val{{$i}}, {{end}}err := this.Service.{{.Name}}(pz{{range .Inputs}}, in.{{.Name}}{{end}})
	if err != nil {
		log.Printf("%s Failed {{.Name}}: %v", pz, err)
		return err
	}
  {{range $i, $e := .Outputs}}
	out.{{.Name}} = val{{$i}} 
  {{end}}
	return nil
}
{{end}}
{{end}}

